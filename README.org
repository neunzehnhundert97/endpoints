* Endpoints
** What is this?
For hobby projects I usually write single page applications which communicate with a REST API. Managing the AJAX endpoints is tedious so I decided to write a solution for it.

This library allows to define endpoints with an input and output type and generate implementations for client and server.

** What about other libraries which do exactly this?
You may know [[https://github.com/lihaoyi/autowire][autowire]] or [[https://endpoints4s.github.io/][endpoints4s]]. There is no particalar reason not to use them, I just could not resist the temptation to write my own solution for the problem. Of course, the other libraries provide more features and less bugs.

If you happen to like the way this library handles things, feel free to try it out.

** Example
First create a project that will be shared between your client and server. It should be cross compiled to support both Scala and ScalaJS. Define your endpoints like this:

#+begin_src scala
  import upickle.default.{Reader, Writer}
  import de.neunzehnhundert97.endpoints.*

  // The data that is transmitted via AJAX
  // The library uses upickle, so you have to derive a reader and writer
  final case class Post(id: Int, content: String, author: Int) derives Reader, Writer

  // Definition as an object
  object PostById extends Endpoint[Int, Post] { // Client wants to send an Int and receives a Post object
    def method = Method.POST // The HTTP method intended to be used
    override def path = "/getPostById" // Optional, a path is generated by using #toString on your endpoint
  }

  // Definition by using the companion object
  val updatePost = Endpoint[Post, Unit]("/updatePost", method.PATCH)
  // This time, the path is mandatory as there is no useful information to be found in #toString
#+end_src

The server generates its endpoint implementation like this:

#+begin_src scala
  import de.neunzehnundert97.endpoints-zhttp.*

  val endpoint = EndpointCreator(PostById).create(Database.postById)
  // To be used with zhttp
#+end_src

And the client like that:

#+begin_src scala
  import de.neunzehnhundert97.endpoints-js.*

  val myAjax = EndpointCreator(updatePost).createFetchEndpoint

  val response: Future[Unit] = myAjax(somePost)
#+end_src

